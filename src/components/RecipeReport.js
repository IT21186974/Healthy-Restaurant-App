import React from 'react';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import logo from '../assets/logo.png';
import { Button } from '@mui/material';

const RecipeReport = ({ user, filteredRecipes }) => {
    const generatePDFReport = () => {
        const doc = new jsPDF({
            format: 'a4',
            unit: 'mm',
        });

        doc.addImage(logo, 'PNG', 80, 20, 50, 50);

        doc.setFontSize(28);
        doc.setTextColor(255, 153, 102);
        doc.text('Recipe Report', 105, 90, null, null, 'center');

        // User Info and Date on Cover Page
        doc.setFontSize(16);
        doc.setTextColor(100);
        doc.text(`Generated by: ${user?.username}`, 105, 105, null, null, 'center');
        doc.text(`Date: ${new Date().toLocaleDateString()}`, 105, 115, null, null, 'center');

        // Horizontal line as separator
        doc.setLineWidth(0.5);
        doc.setDrawColor(255, 153, 102);
        doc.line(20, 125, 190, 125);

        doc.addPage();

        let totalRecipes = filteredRecipes.length;
        let categories = {};
        let totalCookingTime = 0;
        let allIngredients = [];
        let mostComplexRecipe = { title: '', ingredientsCount: 0 };

        filteredRecipes.forEach(recipe => {
            categories[recipe.category] = (categories[recipe.category] || 0) + 1;
            totalCookingTime += recipe.cookingTime || 0;
            const recipeIngredients = Array.isArray(recipe.ingredients)
                ? recipe.ingredients
                : recipe.ingredients.split(',');
            allIngredients = [...allIngredients, ...recipeIngredients];
            if (recipeIngredients.length > mostComplexRecipe.ingredientsCount) {
                mostComplexRecipe = { title: recipe.title, ingredientsCount: recipeIngredients.length };
            }
        });

        const ingredientCounts = {};
        allIngredients.forEach(ingredient => {
            ingredient = ingredient.trim().toLowerCase();
            ingredientCounts[ingredient] = (ingredientCounts[ingredient] || 0) + 1;
        });
        const mostCommonIngredients = Object.keys(ingredientCounts)
            .sort((a, b) => ingredientCounts[b] - ingredientCounts[a])
            .slice(0, 5);

        // Table Data for Recipe Insights
        const insightsTableBody = [
            ['Total Recipes', totalRecipes.toString()],
            ['Average Cooking Time', totalRecipes ? `${(totalCookingTime / totalRecipes).toFixed(2)} minutes` : 'N/A'],
            ['Most Complex Recipe', `${mostComplexRecipe.title} (Ingredients: ${mostComplexRecipe.ingredientsCount})`],
            ['Top 5 Common Ingredients', mostCommonIngredients.join(', ')],
        ];

        doc.setFontSize(18);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(255, 153, 102);
        doc.text('Recipe Insights', 14, 20);

        doc.autoTable({
            startY: 35,
            head: [['Insight', 'Details']],
            body: insightsTableBody,
            theme: 'grid',
            styles: { halign: 'left', valign: 'middle', fontSize: 12 },
            headStyles: { fillColor: [255, 204, 153], textColor: [0, 0, 0] },
            columnStyles: {
                0: { cellWidth: 60 },
                1: { cellWidth: 130 },
            },
        });

        let yOffset = doc.lastAutoTable.finalY + 15;

        doc.setFontSize(18);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(255, 153, 102);
        doc.text('Category Breakdown', 14, yOffset);
        yOffset += 5;

        doc.autoTable({
            startY: yOffset,
            head: [['Category', 'Count']],
            body: Object.keys(categories).map(cat => [cat, categories[cat]]),
            theme: 'striped',
            styles: { fillColor: [255, 229, 204], fontSize: 12 },
            margin: { top: 10, left: 14, right: 14 },
        });

        yOffset = doc.lastAutoTable.finalY + 15;

        // **Recipe List Section**
        doc.setFontSize(18);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(255, 153, 102);
        doc.text('Recipes List', 14, yOffset);
        yOffset += 10;

        filteredRecipes.forEach((recipe, index) => {
            doc.setFont('helvetica', 'normal');
            doc.setTextColor(0, 0, 0);
            doc.setFontSize(12);
            doc.text(`${index + 1}. ${recipe.title}`, 14, yOffset);
            yOffset += 6;

            if (yOffset > 270) {
                doc.addPage();
                yOffset = 20;
            }
        });

        const pageCount = doc.internal.getNumberOfPages();
        for (let i = 1; i <= pageCount; i++) {
            doc.setPage(i);
            doc.setFontSize(10);
            doc.setTextColor(150, 150, 150);
            doc.text(`Page ${i} of ${pageCount}`, 105, 290, null, null, 'center');
        }

        // Save the PDF
        doc.save('recipe_report.pdf');
    };

    return (
        <Button 
            variant="contained" 
            style={{ backgroundColor: '#ffce00', color: '#000000' }}
            onClick={generatePDFReport}
        >
            Generate Recipe Report
        </Button>
    );
};

export default RecipeReport;
